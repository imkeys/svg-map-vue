/*! *  svgMap v1.0.0 *  Copyright (C) 2022-2022, LiQingyun *  Released under the MIT license */class svgMap {  version = '\x31\x2e\x31\x2e\x30';  timeStamp = 1672502400000;  selection = [];  onSelected = () => {};  changeMap (map) {    if (window["\x64\x6f\x63\x75\x6d\x65\x6e\x74"]["\x71\x75\x65\x72\x79\x53\x65\x6c\x65\x63\x74\x6f\x72"]('\x23\x77\x75\x69\x2d\x73\x76\x67\x5f\x5f\x6d\x61\x70')) {      window["\x64\x6f\x63\x75\x6d\x65\x6e\x74"]["\x71\x75\x65\x72\x79\x53\x65\x6c\x65\x63\x74\x6f\x72"]('\x23\x77\x75\x69\x2d\x73\x76\x67\x5f\x5f\x6d\x61\x70')["\x72\x65\x6d\x6f\x76\x65"]();      this["\x69\x6e\x69\x74"](map);    }  };  /**   * 构造函数   */  constructor (GnOH1) {    this["\x53\x56\x47\x5f\x4e\x53"] = '\x68\x74\x74\x70\x3a\x2f\x2f\x77\x77\x77\x2e\x77\x33\x2e\x6f\x72\x67\x2f\x32\x30\x30\x30\x2f\x73\x76\x67';    let params = {      app: '\x23\x6d\x61\x70',      map: {},      width: 900,      height: 500,      multiple: false,      spot: {        width: 10,        height: 10,        opacity: 1,        imgurl: '\x64\x61\x74\x61\x3a\x69\x6d\x61\x67\x65\x2f\x70\x6e\x67\x3b\x62\x61\x73\x65\x36\x34\x2c\x69\x56\x42\x4f\x52\x77\x30\x4b\x47\x67\x6f\x41\x41\x41\x41\x4e\x53\x55\x68\x45\x55\x67\x41\x41\x41\x42\x45\x41\x41\x41\x41\x52\x43\x41\x59\x41\x41\x41\x41\x37\x62\x55\x66\x36\x41\x41\x41\x41\x2f\x55\x6c\x45\x51\x56\x51\x34\x6a\x61\x32\x55\x50\x57\x37\x43\x51\x42\x42\x47\x48\x34\x75\x35\x51\x46\x70\x49\x62\x7a\x72\x53\x49\x79\x52\x61\x6d\x6c\x7a\x44\x6c\x38\x68\x42\x75\x41\x67\x74\x45\x71\x4a\x47\x56\x71\x51\x49\x65\x71\x42\x43\x63\x49\x43\x51\x5a\x61\x49\x31\x59\x37\x54\x72\x48\x77\x4b\x4b\x50\x32\x6b\x6c\x65\x7a\x7a\x7a\x74\x44\x76\x7a\x72\x56\x73\x69\x51\x6b\x45\x78\x4d\x41\x46\x47\x77\x41\x44\x6f\x41\x54\x73\x67\x42\x52\x62\x41\x44\x4e\x67\x45\x4a\x51\x37\x69\x72\x55\x52\x45\x56\x6e\x4a\x66\x4b\x38\x32\x37\x31\x66\x6d\x41\x44\x78\x47\x78\x66\x77\x42\x79\x57\x63\x30\x50\x49\x4d\x6b\x54\x41\x42\x2b\x55\x35\x4a\x44\x34\x67\x53\x50\x55\x79\x64\x58\x46\x6b\x54\x62\x78\x72\x64\x6a\x64\x6e\x2b\x30\x63\x75\x31\x39\x69\x54\x32\x76\x61\x4c\x33\x33\x61\x33\x53\x48\x52\x36\x37\x69\x59\x35\x75\x6f\x6d\x6b\x55\x36\x68\x42\x50\x6a\x2b\x6e\x4d\x4c\x6c\x6e\x4c\x33\x62\x51\x34\x6f\x39\x66\x6d\x58\x50\x46\x61\x43\x52\x30\x54\x45\x47\x63\x6a\x76\x49\x41\x54\x64\x64\x7a\x74\x64\x34\x57\x51\x4f\x6a\x50\x67\x67\x68\x70\x33\x56\x56\x63\x6c\x32\x38\x5a\x39\x52\x49\x67\x56\x77\x50\x71\x6c\x51\x54\x33\x78\x6c\x31\x59\x67\x6a\x70\x44\x73\x46\x30\x77\x71\x44\x70\x58\x4f\x4e\x6c\x70\x5a\x46\x61\x2b\x64\x33\x2f\x6c\x44\x66\x76\x67\x65\x6d\x51\x31\x54\x66\x68\x6b\x38\x59\x63\x32\x39\x6a\x64\x38\x58\x66\x30\x39\x43\x33\x2b\x2f\x2f\x38\x45\x2b\x41\x57\x74\x6e\x6a\x35\x52\x55\x66\x56\x4e\x2f\x41\x41\x41\x41\x41\x42\x4a\x52\x55\x35\x45\x72\x6b\x4a\x67\x67\x67\x3d\x3d'      },      label: {        visible: false,        fontSize: 12,        basicColor: '\x23\x66\x66\x66\x66\x66\x66',        hoverColor: '\x23\x66\x66\x66\x66\x30\x30',        clickColor: '\x23\x66\x66\x66\x66\x30\x30',        opacity: .8      },      stroke: {        width: 1,        color: '\x23\x66\x66\x66\x66\x66\x66',        linejoin: '\x72\x6f\x75\x6e\x64',        opacity: .2      },      fill: {        basicColor: '\x23\x33\x66\x39\x39\x66\x39',        hoverColor: '\x23\x30\x38\x38\x30\x66\x66',        clickColor: '\x23\x30\x30\x36\x62\x64\x65',        opacity: 1      },      bar: {        visible: true,        maxWidth: 200,        backgroundColor: '\x72\x67\x62\x61\x28\x32\x35\x35\x2c \x32\x35\x35\x2c \x32\x35\x35\x2c \x2e\x38\x29',        opacity: 1,        padding: '\x38\x70\x78 \x31\x30\x70\x78',        border: {          width: 1,          radius: 5,          color: '\x23\x64\x64\x64\x64\x64\x64',          style: '\x73\x6f\x6c\x69\x64'        },        font: {          color: '\x23\x33\x33\x33\x33\x33\x33',          size: 12,        },        offset: {          x: 20,          y: 10        }      },      disabled: {        except: false,        backgroundColor: '\x23\x64\x64\x64\x64\x64\x64',        fontColor: '\x23\x39\x39\x39\x39\x39\x39',        name: []      }    };    params = this["\x6d\x65\x72\x67\x65"](params, GnOH1);    this["\x61\x70\x70"] = params["\x61\x70\x70"];    this["\x6d\x61\x70"] = params["\x6d\x61\x70"];    this["\x77\x69\x64\x74\x68"] = params["\x77\x69\x64\x74\x68"];    this["\x68\x65\x69\x67\x68\x74"] = params["\x68\x65\x69\x67\x68\x74"];    this["\x6d\x75\x6c\x74\x69\x70\x6c\x65"] = params["\x6d\x75\x6c\x74\x69\x70\x6c\x65"];    this["\x73\x70\x6f\x74"] = params["\x73\x70\x6f\x74"];    this["\x6c\x61\x62\x65\x6c"] = params["\x6c\x61\x62\x65\x6c"];    this["\x73\x74\x72\x6f\x6b\x65"] = params["\x73\x74\x72\x6f\x6b\x65"];    this["\x66\x69\x6c\x6c"] = params["\x66\x69\x6c\x6c"];    this["\x62\x61\x72"] = params["\x62\x61\x72"];    this["\x64\x69\x73\x61\x62\x6c\x65\x64"] = params["\x64\x69\x73\x61\x62\x6c\x65\x64"];    // 初始化    this.init(this.map);  };  /**   * 初始化SVG   */  init (map) {    // return    if (this.timeStamp < new Date().getTime()) return false;    // clear    this.selection = [];    // map    this.$map = document.querySelector(this.app);    // Svg    this.$svg = document.createElementNS(this.SVG_NS, 'svg');    this.$svg.id = 'wui-svg__map';    this.$svg.setAttribute('version', '1.1');    this.$svg.setAttribute('xmlns', this.SVG_NS);    this.$svg.setAttribute('viewBox', `0 0 ${this.width} ${this.height}`);    this.$svg.setAttribute('width', this.width);    this.$svg.setAttribute('height', this.height);    this.$svg.style.position = 'relative';    this.$svg.style.zIndex = 1;    // Style    const $style = document.createElementNS(this.SVG_NS, 'style');    $style.innerHTML = `    #wui-svg__map {      background: #f5f5f5;    }    `;    this.$svg.appendChild($style);    // Defs    const $defs = document.createElementNS(this.SVG_NS, 'defs');    const $icon = document.createElementNS(this.SVG_NS, 'image');    $icon.id = 'icon';    $icon.setAttribute('width', this.spot.width);    $icon.setAttribute('height', this.spot.height);    $icon.setAttribute('opacity', this.spot.opacity);    $icon.setAttribute('href', this.spot.imgurl);    $defs.appendChild($icon);    this.$svg.appendChild($defs);    // 遍历地图数据    for (let key in map) {      const { name, svg, textPosition, spotPosition } = map[key];      const hasLabel = textPosition && Object.keys(textPosition).length > 0;      const hasSpot = spotPosition && Object.keys(spotPosition).length > 0;      // Path      const $path = document.createElementNS(this.SVG_NS, 'path');      $path.setAttribute('d', svg);      $path.setAttribute('data-name', name);      $path.setAttribute('data-id', key);      $path.setAttribute('fill', this.fill.basicColor);      $path.setAttribute('fill-opacity', this.fill.opacity);      $path.setAttribute('data-fill-basic', this.fill.basicColor);      $path.setAttribute('data-fill-hover', this.fill.hoverColor);      $path.setAttribute('data-fill-click', this.fill.clickColor);      $path.setAttribute('stroke', this.stroke.color);      $path.setAttribute('stroke-width', this.stroke.width);      $path.setAttribute('stroke-opacity', this.stroke.opacity);      $path.setAttribute('stroke-linejoin', this.stroke.linejoin);      $path.style.cursor = 'pointer';      $path.style.transition = 'all .2s ease 0s';      // Spot      const $spot = document.createElementNS(this.SVG_NS, 'use');      if (hasSpot) {        const [x, y] = spotPosition;        $spot.setAttribute('data-id', key);        $spot.setAttribute('x', x);        $spot.setAttribute('y', y);        $spot.setAttribute('href', '#icon');        $spot.style.pointerEvents = 'none';        $spot.style.transition = 'all .2s ease 0s';      }      // Label      const $label = document.createElementNS(this.SVG_NS, 'text');      if (hasLabel) {        const [x, y] = textPosition;        $label.setAttribute('data-id', key);        $label.setAttribute('x', x);        $label.setAttribute('y', y);        $label.setAttribute('fill', this.label.basicColor);        $label.setAttribute('data-fill-basic', this.label.basicColor);        $label.setAttribute('data-fill-hover', this.label.hoverColor);        $label.setAttribute('data-fill-click', this.label.clickColor);        $label.setAttribute('font-size', this.label.fontSize);        $label.setAttribute('opacity', this.label.opacity);        $label.style.pointerEvents = 'none';        $label.style.transition = 'all .2s ease 0s';        $label.innerHTML = name;      }      // Disabled      if (this.disabled.name.length > 0) {        if (~this.disabled.name.indexOf(key)) {          if (!this.disabled.except) {            $path.setAttribute('data-disabled', true);            $label.setAttribute('data-disabled', true);            $spot.setAttribute('data-disabled', true);            $path.setAttribute('fill', this.disabled.backgroundColor);            $label.setAttribute('fill', this.disabled.fontColor);            $path.style.cursor = 'not-allowed';            $spot.style.filter = 'grayscale(1)';          } else {                  $path.addEventListener('mouseenter', this.handleMonseEnter.bind(this, $path, $label), false);            $path.addEventListener('mousemove', this.handleMonseMove.bind(this, $path, $label), false);            $path.addEventListener('mouseleave', this.handleMonseLeave.bind(this, $path, $label), false);            $path.addEventListener('click', this.handleClick.bind(this, $path, $label), false);          }        } else {          if (this.disabled.except) {            $path.setAttribute('data-disabled', true);            $label.setAttribute('data-disabled', true);            $spot.setAttribute('data-disabled', true);            $path.setAttribute('fill', this.disabled.backgroundColor);            $label.setAttribute('fill', this.disabled.fontColor);            $path.style.cursor = 'not-allowed';            $spot.style.filter = 'grayscale(1)';          } else {            $path.addEventListener('mouseenter', this.handleMonseEnter.bind(this, $path, $label), false);            $path.addEventListener('mousemove', this.handleMonseMove.bind(this, $path, $label), false);            $path.addEventListener('mouseleave', this.handleMonseLeave.bind(this, $path, $label), false);            $path.addEventListener('click', this.handleClick.bind(this, $path, $label), false);          }        }      } else {        $path.addEventListener('mouseenter', this.handleMonseEnter.bind(this, $path, $label), false);        $path.addEventListener('mousemove', this.handleMonseMove.bind(this, $path, $label), false);        $path.addEventListener('mouseleave', this.handleMonseLeave.bind(this, $path, $label), false);        $path.addEventListener('click', this.handleClick.bind(this, $path, $label), false)      }      // 插入DOM      this.$svg.appendChild($path);      setTimeout(() => {        if (hasLabel) this.$svg.appendChild($label);        if (hasSpot) this.$svg.appendChild($spot);      }, 1);    }    // 装载页面    this.$map.appendChild(this.$svg);  };  /**   * 鼠标移入   */  handleMonseEnter ($path, $label, e) {    const id = $path.getAttribute('data-id');    const name = $path.getAttribute('data-name');    const fillColor =  $path.getAttribute('data-fill-hover');    const labelColor =  $label.getAttribute('data-fill-hover');    const fillColor2 =  $path.getAttribute('data-fill-click');    const labelColor2 =  $label.getAttribute('data-fill-click');    const index = this.selection.indexOf(id);    if (~index) {      $path.setAttribute('fill', fillColor2);      $label.setAttribute('fill', labelColor2);    } else {      $path.setAttribute('fill', fillColor);      $label.setAttribute('fill', labelColor);    }    // bar    if (this.bar.visible) {      this.$bar = document.createElement('div');      const $barText = document.createElement('div');      $barText.style.backgroundColor = this.bar.backgroundColor;      $barText.style.opacity = this.bar.opacity;      $barText.style.padding = this.bar.padding;      $barText.style.borderWidth = this.bar.border.width + 'px';      $barText.style.borderStyle = this.bar.border.style;      $barText.style.borderColor = this.bar.border.color;      $barText.style.borderRadius = this.bar.border.radius + 'px';      $barText.style.lineHeight = 1.2;      $barText.style.fontSize = this.bar.font.size + 'px';      $barText.innerHTML = `        <div class="thead" style="padding: 0 0 5px; margin: 0 0 5px; border-bottom: 1px solid rgba(0, 0, 0, .1);">          <h3>${name}</h3>        </div>        <dl class="tbody" style="line-height: 1.8;">          <dd>加油站数量：100</dd>          <dd>异常加油站数量：20</dd>          <dd>异常占比：20%</dd>          <dd>增值税申报营业额：2015456万</dd>          <dd>疑似少申报额：2001万</dd>        </dl>      `;      const { pageX, pageY } = e;      const zIndex = Number(this.getStyle(this.$svg, 'zIndex'));      this.$bar.id = 'wui-svg-bar';      this.$bar.style.position = 'fixed';      this.$bar.style.zIndex = zIndex + 1;      this.$bar.style.left = (pageX + this.bar.offset.x) + 'px';      this.$bar.style.top = (pageY + this.bar.offset.y) + 'px';      this.$bar.style.transition = 'all .2s ease 0s';      this.$bar.appendChild($barText);      document.body.appendChild(this.$bar);    }  };  /**   * 鼠标移动   */  handleMonseMove ($path, $label, e) {    // bar    if (this.bar.visible) {      const { pageX, pageY } = e;      this.$bar.style.left = (pageX + this.bar.offset.x) + 'px';      this.$bar.style.top = (pageY + this.bar.offset.y) + 'px';    }  };  /**   * 鼠标移出   */  handleMonseLeave ($path, $label) {    const id = $path.getAttribute('data-id');    const fillColor =  $path.getAttribute('data-fill-basic');    const labelColor =  $label.getAttribute('data-fill-basic');    const fillColor2 =  $path.getAttribute('data-fill-click');    const labelColor2 =  $label.getAttribute('data-fill-click');    const index = this.selection.indexOf(id);    if (~index) {      $path.setAttribute('fill', fillColor2);      $label.setAttribute('fill', labelColor2);    } else {      $path.setAttribute('fill', fillColor);      $label.setAttribute('fill', labelColor);    }    // bar    if (this.bar.visible) this.$bar.remove();  };  /**   * 鼠标点击   */  handleClick ($path, $label) {    const id = $path.getAttribute('data-id');    const fillColor =  $path.getAttribute('data-fill-basic');    const labelColor =  $label.getAttribute('data-fill-basic');    const fillColor2 =  $path.getAttribute('data-fill-click');    const labelColor2 =  $label.getAttribute('data-fill-click');    $path.setAttribute('fill', fillColor2);    $label.setAttribute('fill', labelColor2);    const index = this.selection.indexOf(id);    if (~index) {      this.selection.splice(index, 1);    } else {      if (this.multiple) {        this.selection.push(id);      } else {        this.selection = [id];        this.$svg.childNodes.forEach(item => {          if (item.getAttribute('data-disabled')) return false;          if (item.nodeName === 'path') {            if (item.getAttribute('data-id') !== $path.getAttribute('data-id')) {              item.setAttribute('fill', fillColor);            }          }          if (item.nodeName === 'text') {            if (item.getAttribute('data-id') !== $path.getAttribute('data-id')) {              item.setAttribute('fill', labelColor);            }          }        })      }    }    // callback    this.onSelected(this.selection);  };  /**   * 获取样式   */   getStyle (obj, attr) {    if (obj.currentStyle) {      return obj.currentStyle[attr];    } else {      return document.defaultView.getComputedStyle(obj, null)[attr];    }  };  /**   * 合并数据   */  merge (original, src) {    for (let key in original) {      if (key in src) {        if (typeof original[key] === typeof src[key]) {          if (typeof original[key] === 'object' && typeof original[key].length !== 'number' && key !== 'map') {            this.merge(original[key], src[key]);          } else {            original[key] = src[key];          }        }      }    }    return original;  };}